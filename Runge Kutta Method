import numpy as np

def rk4_solver(f, y0, t0, tf, h):
    # Runge-Kutta 4th Order Method
    t_values = np.arange(t0, tf + h, h)
    y_values = np.zeros_like(t_values)
    y_values[0] = y0

    for i in range(1, len(t_values)):
        t = t_values[i - 1]
        y = y_values[i - 1]

        k1 = h * f(t, y)
        k2 = h * f(t + h/2, y + k1/2)
        k3 = h * f(t + h/2, y + k2/2)
        k4 = h * f(t + h, y + k3)

        y_values[i] = y + (k1 + 2*k2 + 2*k3 + k4) / 6
        print("Iteration {}: t = {:.2f}, y = {:.6f}".format(i, t_values[i], y_values[i]))

    return y_values[-1]

# Define the ODE function
def f(t, y):
    return np.sin(t) - y

y0 = 0
t0 = 0
tf = 10
h = 0.1

y_sol = rk4_solver(f, y0, t0, tf, h)

print("\nFinal Solution at t = {:.2f} is: {:.6f}".format(tf, y_sol))
